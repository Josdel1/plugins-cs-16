/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>
#include <fakemeta>
#include <cstrike>
#include <sqlx>
#include <fun>
#include <xs>
#include <amx_settings_api>

native surf_end_event_zombie(id)
native surf_init_event_zombie(id)
native surf_get_user_zombie(id)
native surf_set_user_zombie(id, amount)

new const RMS_CUSTOMIZATION_FILE[] = "surf_configurations.ini"

#define PLUGIN "[OG] Surf Niveles"
#define VERSION "v1"
#define AUTHOR "Boogie"

#define MYSQL_HOST "5.180.31.106"
#define MYSQL_USER "u207_aic85mFc4P"
#define MYSQL_PASS "VvzjgCgrO@j0Wwi.OUy8Rmr0"
#define MYSQL_DATEBASE "s207_surf_ong"

#define NIVEL_MAXIMO 1000
#define HAPPY_INICIO_DAY 12
#define HAPPY_INICIO_NIGHT 18

#define TASK_REGISTER_MENU 121212
#define ID_REGISTER (taskid - TASK_REGISTER_MENU)

//#define need_nivel_sig(%1)    ((%1 * 150) * %1 )
#define need_nivel_sig(%1)    ((%1 * 20) * %1 )

new g_Nivel[33], g_Exp[33], g_Monedas[33], g_playername[33][32], g_password[33][32], g_Ganancia[33], g_TagPlayer[33][32], g_Estado[33], bool:g_HudHide[33], bool:g_Logueando[33],
g_hud_type[33], g_hud_color[33][3], g_SyncHud[4], g_maxplayers, Handle:g_hTuple, g_changename_retry[33], g_wait_autosave[33], bool:g_autologueo[33], g_EventMode, bool:g_EventoForzado

#define SVMAX_PLAYERS 33

new g_Estados[SVMAX_PLAYERS][32]

new const Prefijo[] = "!t[!gOG!t]!y"
new const szTable[ ] = "usuarios";


enum _: { NINGUN_MODO = 0, MODO_HAPPYHOUR, MODO_ZOMBIE, MODO_ESCONDIDAS }
enum _:DATA_TYPEADM { TAG_ADMIN[32], TIPO_ADMIN, GANANCIA }
enum { REGISTRAR_CUENTA, LOGUEAR_CUENTA, VERIFY_ACCOUNT, CARGAR_DATOS, GUARDAR_DATOS, BUGFIXCONNECT }
enum { REGISTRADO = 0, LOGUEADO }
enum _: { HUD_NORMAL = 0, HUD_BASICO, HUD_ANTRAX }
enum _:DATA_LANG { HUD_LANG[32] }
enum _:DATA_MEJORAS { MEJORA_NAME[32], MEJORA_INFO[32], MEJORA_COSTO, MEJORA_LEVEL, MEJORA_ADMIN }
enum _:DATA_WEAP_ADM { WEAPON_NAME[32], WEAPON_TYPE[32], CSW_WEAPON }

new const Mejoras[][DATA_MEJORAS] = 
{
	{ "Trace Shoot",	"Rayos al Disparar (Efectos)", 			3000,	25,	ADMIN_ALL},
	{ "Double Jump",	"Salto Doble, Modo Jason (KNIFE)",		7000,	50,	ADMIN_ALL},
	{ "Assassin",	"Asesina y Recupera +25 HP", 			15000,	150,	ADMIN_ALL},
	{ "No Recoil",	"Precision de Bala: 80%", 			125000,	400,	ADMIN_ALL}
	
}
new const LANG_HUD[][DATA_LANG] = 
{
	{ "NORMAL_HUD" },
	{ "BASIC_HUD" },
	{ "ANTRAX_HUD" }
}
new const Admin_Weapons[][DATA_WEAP_ADM] = { 
	{ "AK47 Kalashnikov",	"weapon_ak47",  		CSW_AK47 }, 
	{ "M4A1 Carabine",	"weapon_m4a1",		CSW_M4A1 },
	{ "AWP Sniper",		"weapon_awp",		CSW_AWP },
	{ "Taka TT",		"weapon_g3sg1",  	CSW_G3SG1 },
	{ "Taka CT",		"weapon_sg550",  	CSW_SG550 },
	{ "ShotGun M3",		"weapon_m3",		CSW_M3 },
	{ "ShotGun XM10",	"weapon_xm1014",	CSW_XM1014 }  
}

new saytext, Array:g_aAdminNames, Array:g_aAdminEarn, Array:g_aAdminFlags

new bool:g_Mejora[33][sizeof(Mejoras)], Float: cl_pushangle[33][3], m_spriteTexture, bullets[ 33 ]

const WEAPONS_BITSUM = (1<<CSW_KNIFE|1<<CSW_HEGRENADE|1<<CSW_FLASHBANG|1<<CSW_SMOKEGRENADE|1<<CSW_C4)
const SECONDARY_WEAPONS_BIT_SUM = (1<<CSW_P228)|(1<<CSW_ELITE)|(1<<CSW_FIVESEVEN)|(1<<CSW_USP)|(1<<CSW_GLOCK18)|(1<<CSW_DEAGLE)

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	set_msg_block(get_user_msgid("ClCorpse"), BLOCK_SET)
	
	register_dictionary("surf_fantasy_lang.txt")
	register_dictionary("languages.txt")
	register_dictionary("multilingual.txt")
	
	register_clcmd("say", "BlockSay")
	register_clcmd("say_team", "BlockTeamSay")
	register_clcmd("chooseteam", "hook_chooseteam")
	
	register_clcmd( "CREATE_PW", "reg_password" )
	register_clcmd( "LOG_PW", "log_password" )
	
	register_concmd("og_darlvl", "CmdGiveLV", _, "- og_darlvl <nombre> <Dar Nivel a Jugador> - ACCESS OWNER" );
	register_concmd("og_darcoins", "CmdGiveCoins", _, "- og_darcoins <nombre> <Dar Monedas a Jugador> - ACCESS OWNER" );
	
	saytext = get_user_msgid("SayText");
	register_message(saytext, "avoid_duplicated")
	
	RegisterHam(Ham_Killed, "player", "fw_PlayerKilled", 1)
	
	new weapon_name[24]
	for (new i = 1; i <= 30; i++)
	{
		if (!(WEAPONS_BITSUM & 1 << i) && get_weaponname(i, weapon_name, 23))
		{
			RegisterHam(Ham_Weapon_PrimaryAttack, weapon_name, "fw_Weapon_PrimaryAttack_Pre")
			RegisterHam(Ham_Weapon_PrimaryAttack, weapon_name, "fw_Weapon_PrimaryAttack_Post", 1)
		}
	}
	
	RegisterHam(Ham_CS_Player_ResetMaxSpeed, "player", "OnCBasePlayer_ResetMaxSpeed_P", true);
	RegisterHam(Ham_Spawn, "player", "fwd_PlayerPostThink")
	RegisterHam(Ham_TakeDamage, "player", "Ham_PlayerTakeDamage");
	register_forward(FM_SetClientMaxspeed, "OnSetClientMaxspeed_P", true);
	
	register_clcmd("nightvision", "show_menu_main")
	register_clcmd( "insert_red_amount", "insert_color_amount1")
	register_clcmd( "insert_green_amount", "insert_color_amount2")
	register_clcmd( "insert_blue_amount", "insert_color_amount3")
	
	register_event("CurWeapon", "make_tracer", "be", "1=1", "3>0")
	register_event( "StatusValue", "event_show_status", "be", "1=2", "2!0")
	register_event( "StatusValue", "event_hide_status", "be", "1=1", "2=0")
	
	g_SyncHud[0] = CreateHudSyncObj()
	g_SyncHud[1] = CreateHudSyncObj()
	g_SyncHud[2] = CreateHudSyncObj()
	g_SyncHud[3] = CreateHudSyncObj()
	g_maxplayers = get_maxplayers()
	
	set_task(1.0, "player_functions", _, _, _, "b")
	
	MySQLx_Init();
}
public CmdGiveLV( iPlayer, level, cid )
{
	if(!(get_user_flags(iPlayer) & ADMIN_KICK))
		return PLUGIN_HANDLED;
	
	new arg [ 32 ]
	read_argv ( 1, arg, 31 ) 

	new AddXP [ 32 ]
	read_argv ( 2, AddXP, 31 )
	
	new XPtoGive = str_to_num ( AddXP )
	
	new iTarget = cmd_target( iPlayer, arg, 2 )
	
	if (!iTarget || XPtoGive < 1 || (g_Nivel[iTarget] == NIVEL_MAXIMO && XPtoGive > NIVEL_MAXIMO))
	{
		return PLUGIN_HANDLED;
	}
	
	g_Exp[iTarget] = need_nivel_sig(XPtoGive)
	check_level(iTarget);
	guardar_datos(iTarget)
	
	return PLUGIN_CONTINUE
}
public CmdGiveCoins( iPlayer, level, cid )
{
	if(!(get_user_flags(iPlayer) & ADMIN_KICK))
		return PLUGIN_HANDLED;
	
	new arg [ 32 ]
	read_argv ( 1, arg, 31 ) 

	new AddXP [ 32 ]
	read_argv ( 2, AddXP, 31 )
	
	new XPtoGive = str_to_num ( AddXP )
	
	new iTarget = cmd_target( iPlayer, arg, 2 )
	
	if (!iTarget || XPtoGive < 1)
	{
		return PLUGIN_HANDLED;
	}
	
	g_Monedas[iTarget] += XPtoGive
	guardar_datos(iTarget)
	
	return PLUGIN_CONTINUE
}
public avoid_duplicated(msgId, msgDest, receiver) return PLUGIN_HANDLED
public plugin_precache() {
	register_forward(FM_ClientUserInfoChanged, "fw_ClientUserInfoChanged")
	//register_forward(FM_TraceLine,"fw_traceline",1);
	
	precache_sound("surf_og/UpLevel.wav")
	precache_sound("surf_og/DownLevel.wav")
	precache_sound("surf_og/UpRank.wav")
	
	m_spriteTexture = precache_model("sprites/dot.spr")
	
	g_aAdminNames = ArrayCreate(32)
	g_aAdminEarn = ArrayCreate(1,1)
	g_aAdminFlags = ArrayCreate(32)
	
	load_customization_from_files()
}
public load_customization_from_files() {
	amx_load_setting_string_arr(RMS_CUSTOMIZATION_FILE, "Server Configurations", "ADMIN_NAMES", g_aAdminNames)
	amx_load_setting_int_arr(RMS_CUSTOMIZATION_FILE, "Server Configurations", "ADMIN_GANANCIA", g_aAdminEarn)
	amx_load_setting_string_arr(RMS_CUSTOMIZATION_FILE, "Server Configurations", "ADMIN_FLAG", g_aAdminFlags)
}
public plugin_natives() {
	register_native("surf_get_mejora_trace", "native_get_trace", 1)
	register_native("surf_get_mejora_djump", "native_get_djump", 1)
	register_native("surf_get_mejora_killed", "native_get_killed", 1)
	register_native("surf_get_mejora_recoil", "native_get_recoil", 1)
	register_native("surf_get_user_level", "native_get_level", 1)
	register_native("surf_get_user_exp", "native_get_exp", 1)
	register_native("surf_set_user_exp", "native_set_exp", 1)
	register_native("surf_set_mode", "native_set_mode")
}
public native_get_level(id) {
	if(!is_user_connected(id)) return -1
	
	return g_Nivel[id];
}
public native_get_trace(id) {
	if(!is_user_connected(id) || g_Mejora[id][0]) return 0
	
	g_Mejora[id][0] = true
	
	return 1
}
public native_get_djump(id) {
	if(!is_user_connected(id) || !g_Mejora[id][1]) return false
	
	return true
}
public native_get_killed(id) {
	if(!is_user_connected(id) || g_Mejora[id][2]) return 0
	
	g_Mejora[id][2] = true
	
	return 1
}
public native_get_recoil(id) {
	if(!is_user_connected(id) || !g_Mejora[id][3]) return false
	
	return true
}
public native_set_mode(bool:amount) {
	g_EventMode = amount
	
	return g_EventMode
}
public native_get_exp(id) {
	if(!is_user_connected(id)) return -1
	
	return g_Exp[id]
}
public native_set_exp(id, amount) {
	if(!is_user_connected(id)) return -1
	
	g_Exp[id] = amount
	check_level(id)
	
	return g_Exp[id]
}
reset_vars(id) {
	g_Exp[id] = 0
	g_Nivel[id] = 1
	g_Ganancia[id] = 1
	g_TagPlayer[id] = "USER"
	g_password[id] = ""
	g_HudHide[id] = false
	g_hud_type[id] = 0
	g_hud_color[id][0] = 0
	g_hud_color[id][1] = 150
	g_hud_color[id][2] = 200
	g_Monedas[id] = 0
	g_wait_autosave[id] = 0
	g_Logueando[id] = false
	g_autologueo[id] = true
	
	for(new i = 0; i < sizeof(Mejoras); i++) g_Mejora[id][i] = false
}
public client_putinserver(id) {
	reset_vars(id)
	
	if(!is_user_bot(id)) {
		get_user_name(id, g_playername[id], charsmax(g_playername[]))
		
		check_account(id)
	
		for (new i = 0; i < ArraySize(g_aAdminNames); i++) 
		{
			new szAdminNames[64], szAdminFlags[32]
			ArrayGetString(g_aAdminNames, i, szAdminNames, 63);
			ArrayGetString(g_aAdminFlags, i, szAdminFlags, 31);
			
			
			new admin = get_user_flags(id)
			
			if(admin & read_flags(szAdminFlags)) 
			{ 
				g_Ganancia[id] = ArrayGetCell(g_aAdminEarn, i)
				copy(g_TagPlayer[id], 31, szAdminNames)
				break;
			}
			else 
			{
				g_Ganancia[id] = 1
				g_TagPlayer[id] = "USER"
			}
		}
	}
}
public check_account(id) {
	new szQuery[ 256 ], iData[ 2 ];
	
	iData[ 0 ] = id;
	iData[ 1 ] = VERIFY_ACCOUNT;
	
	formatex( szQuery, charsmax( szQuery ), "SELECT id,Nick,Password,UON,LastIp,AutoLogueo FROM %s WHERE Nick='%s'", szTable, g_playername[ id ]);
	SQL_ThreadQuery( g_hTuple, "DataHandler", szQuery, iData, 2 );
}
public client_disconnected(id) 
{
	if( g_Estado[id] == LOGUEADO) 
	{
		g_Estado[id] = REGISTRADO
		guardar_datos( id );
	}
}
public player_functions() {
	static Buttons, WeaponID
	
	new data[12], Hora = 0, Infinite_Round = 0
	get_time("%H", data, 12)
	Hora = str_to_num(data)
	Infinite_Round = get_cvar_num("mp_round_infinite")
	
	if(Infinite_Round == 0 && g_EventMode == MODO_HAPPYHOUR || Infinite_Round == 0 && g_EventMode == MODO_ZOMBIE) {
		set_cvar_num("mp_round_infinite", 1)
		set_cvar_num("mp_forcerespawn", 3) 
	}
	else {
		if(Infinite_Round == 1 && g_EventMode == NINGUN_MODO) {
			set_cvar_num("mp_round_infinite", 0)
			set_cvar_num("mp_forcerespawn", 0) 
		}
	}
	
	if(!g_EventoForzado) {
		if(Hora == HAPPY_INICIO_DAY) g_EventMode = MODO_HAPPYHOUR
		else if(Hora == HAPPY_INICIO_NIGHT) g_EventMode = MODO_HAPPYHOUR
		else {
			if(g_EventMode != MODO_ZOMBIE)
				g_EventMode = NINGUN_MODO
		}
	}
	
	for(new id = 1; id <= g_maxplayers; id++) {
		if(!is_user_connected(id)) continue
		
		Buttons = pev(id, pev_button)
		WeaponID = get_user_weapon(id)
		
		if(Buttons != 0 && is_user_alive(id) && WeaponID != CSW_KNIFE && g_Estado[id] == REGISTRADO) {
			engclient_cmd(id, "weapon_knife")
			continue
		}
		
		if(surf_get_user_zombie(id) && g_EventMode != MODO_ZOMBIE) {
			surf_set_user_zombie(id, 0)
		}
		
		if(g_Estado[id] != LOGUEADO || g_HudHide[id]) continue
		
		if(g_Exp[id] > need_nivel_sig(NIVEL_MAXIMO)) g_Exp[id] = need_nivel_sig(NIVEL_MAXIMO)
		
		check_level(id)
		
		g_wait_autosave[id]++
		
		if(g_wait_autosave[id] >= 30) { guardar_datos(id); g_wait_autosave[id] = 0; }
		
		new LvlPlayer = g_Nivel[id]+1
		
		new NuevoNivel = (need_nivel_sig(LvlPlayer)-g_Exp[id])
		new Spectador = pev(id, pev_iuser1)
		new NuevoNivelSpec = (need_nivel_sig((g_Nivel[Spectador]+1))-g_Exp[Spectador])
		
		if(Spectador != id && !is_user_alive(id)) {
			set_hudmessage(g_hud_color[id][0], g_hud_color[id][1], g_hud_color[id][2], -1.0, 0.7, 0, 0.0, 1.1, 0.01 ,0.01, 1)
			ShowSyncHudMsg(id, g_SyncHud[0], "%L: = %s =^n[ Nivel: %d/%d ] - [ EXP: %d/%d ]^n[ Coins: %d ]", id, "ACCOUNT_LANG", g_playername[Spectador], g_Nivel[Spectador], NIVEL_MAXIMO, g_Exp[Spectador], NuevoNivelSpec, g_Monedas[Spectador])
			continue
		}
		
		if(g_hud_type[id] == HUD_NORMAL)
		{
			set_hudmessage(g_hud_color[id][0], g_hud_color[id][1], g_hud_color[id][2], 0.70, 0.10, 0, 0.0, 1.1, 0.01, 0.01, 1);
			ShowSyncHudMsg(id, g_SyncHud[0], "%L: = %s =^n^n[ Nivel: %d/%d ]^n[ EXP: %d/%d ]^n[ Coins: %d ]^n^n[ %s ]", 
			id, "ACCOUNT_LANG", g_playername[id],
			g_Nivel[id], NIVEL_MAXIMO,
			g_Exp[id], NuevoNivel,
			g_Monedas[id],
			g_EventMode == NINGUN_MODO ? "Ningun Evento Activo" : (g_EventMode == MODO_HAPPYHOUR ? "MODO HAPPYHOUR" : "MODO ZOMBIE"))
		}
		else if(g_hud_type[id] == HUD_BASICO)
		{
			set_hudmessage(g_hud_color[id][0], g_hud_color[id][1], g_hud_color[id][2], -1.0, 0.85, 0, 0.0, 1.1, 0.01, 0.01, 1);
			ShowSyncHudMsg(id, g_SyncHud[0], "[ Nivel: %d/%d ] - [ EXP: %d/%d ]", 
			g_Nivel[id], NIVEL_MAXIMO,
			g_Exp[id], NuevoNivel)
		}
		else if(g_hud_type[id] == HUD_ANTRAX)
		{
			set_hudmessage(g_hud_color[id][0], g_hud_color[id][1], g_hud_color[id][2], 0.60, 0.70, 1, 0.0, 1.1, 0.01, 0.01, 1);
			ShowSyncHudMsg(id, g_SyncHud[0], "[ Nivel: %d/%d | EXP: %d/%d ]", 
			g_Nivel[id], NIVEL_MAXIMO,
			g_Exp[id], NuevoNivel)
		}
	}
}
public event_show_status(id)
{
	static player, junk;
	get_user_aiming(id, player, junk);
    
	if (!is_user_alive(player))
		return;
	
	set_hudmessage(255, 0, 50, -1.0, 0.60, 1, 0.01, 3.0, 0.01, 0.01, 0);
	ShowSyncHudMsg(id, g_SyncHud[1], "= %s =^nHP: %d / AP: %d^nLEVEL: %d/%d", g_playername[player], get_user_health(player), get_user_armor(player), g_Nivel[player], NIVEL_MAXIMO);
}

public event_hide_status(id)
{
	ClearSyncHud(id, g_SyncHud[1])
}  
public fw_ClientUserInfoChanged( id, buffer ) {
	if (!is_user_connected(id) || g_Estado[id] != LOGUEADO)
		return FMRES_IGNORED;
	
	static nick[32] 
	engfunc(EngFunc_InfoKeyValue, buffer, "name", nick, sizeof nick - 1) 
	
	if(equal(g_playername[id], nick))
		return FMRES_IGNORED; 
		
	client_cmd(id, "name ^"%s^"; setinfo name ^"%s^"", g_playername[id], g_playername[id]) 
	chatcolor(id, "%s ESTA!g PROHIBIDO!y EL CAMBIO DE!g NOMBRE!t EN ESTE!g SERVIDOR!y.", Prefijo)
	
	g_changename_retry[id]++
	if(g_changename_retry[id] >= 3) {
		g_changename_retry[id] = 0
		server_cmd("kick #%d ^"No esta permitido el Cambio de Nombre 3er Aviso.^"", get_user_userid(id))
	}
	
	return FMRES_SUPERCEDE; 
}
public Ham_PlayerTakeDamage(iVictim, iWeapon, iAttacker, Float:damage, iDamage_Bits)
{
	if (iVictim == iAttacker || !is_user_alive(iAttacker) || !is_user_connected(iAttacker)) return HAM_IGNORED;
	
	if(cs_get_user_buyzone(iVictim) || cs_get_user_buyzone(iAttacker)) return HAM_SUPERCEDE
	
	new iWPN_id, iClip, iAmmo;
	iWPN_id = get_user_weapon( iAttacker, iClip, iAmmo );
	
	switch( iWPN_id) {
		case CSW_M3: {
			if(g_Nivel[iAttacker] >= 800)
				SetHamParamFloat(4, damage * 4.0)
			else if(g_Nivel[iAttacker] >= 650)
				SetHamParamFloat(4, damage * 1.7)
			else if(g_Nivel[iAttacker] >= 380)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 250)
				SetHamParamFloat(4, damage * 1.3)
			else if(g_Nivel[iAttacker] >= 180)
				SetHamParamFloat(4, damage * 1.1)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_M4A1: {
			if(g_Nivel[iAttacker] >= 800)
				SetHamParamFloat(4, damage * 2.0)
			else if(g_Nivel[iAttacker] >= 550)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 55)
				SetHamParamFloat(4, damage * 1.3)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_AK47: {
			if(g_Nivel[iAttacker] >= 800)
				SetHamParamFloat(4, damage * 2.0)
			else if(g_Nivel[iAttacker] >= 550)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 55)
				SetHamParamFloat(4, damage * 1.3)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_G3SG1: {
			if(g_Nivel[iAttacker] >= 700)
				SetHamParamFloat(4, damage * 1.7)
			else if(g_Nivel[iAttacker] >= 400)
				SetHamParamFloat(4, damage * 1.4)
			else if(g_Nivel[iAttacker] >= 200)
				SetHamParamFloat(4, damage * 1.2)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_SG550: {
			if(g_Nivel[iAttacker] >= 600)
				SetHamParamFloat(4, damage * 1.8)
			else if(g_Nivel[iAttacker] >= 400)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 200)
				SetHamParamFloat(4, damage * 1.3)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_AWP: {
			if(g_Nivel[iAttacker] >= 800)
				SetHamParamFloat(4, damage * 10.0)
			else if(g_Nivel[iAttacker] >= 450)
				SetHamParamFloat(4, damage * 1.8)
			else if(g_Nivel[iAttacker] >= 40)
				SetHamParamFloat(4, damage * 1.3)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_DEAGLE: {
			if(g_Nivel[iAttacker] >= 320)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 180)
				SetHamParamFloat(4, damage * 1.3)
			else if(g_Nivel[iAttacker] >= 35)
				SetHamParamFloat(4, damage * 1.1)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_KNIFE: {
			if(g_Nivel[iAttacker] >= 555)
				SetHamParamFloat(4, damage * 2.0)
			else if(g_Nivel[iAttacker] >= 280)
				SetHamParamFloat(4, damage * 1.8)
			else if(g_Nivel[iAttacker] >= 155)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 75)
				SetHamParamFloat(4, damage * 1.3)
			else if(g_Nivel[iAttacker] >= 5)
				SetHamParamFloat(4, damage * 1.1)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_GLOCK18: {
			if(g_Nivel[iAttacker] >= 333)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 125)
				SetHamParamFloat(4, damage * 1.3)
			else if(g_Nivel[iAttacker] >= 12)
				SetHamParamFloat(4, damage * 1.1)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_HEGRENADE: {
			if(g_Nivel[iAttacker] >= 400)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 200)
				SetHamParamFloat(4, damage * 1.3)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_USP: {
			if(g_Nivel[iAttacker] >= 333)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 125)
				SetHamParamFloat(4, damage * 1.3)
			else if(g_Nivel[iAttacker] >= 12)
				SetHamParamFloat(4, damage * 1.1)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_M249: {
			if(g_Nivel[iAttacker] >= 700)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 500)
				SetHamParamFloat(4, damage * 1.3)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
		case CSW_XM1014: {
			if(g_Nivel[iAttacker] >= 600)
				SetHamParamFloat(4, damage * 1.7)
			else if(g_Nivel[iAttacker] >= 300)
				SetHamParamFloat(4, damage * 1.5)
			else if(g_Nivel[iAttacker] >= 150)
				SetHamParamFloat(4, damage * 1.3)
			else
				SetHamParamFloat(4, damage * 1.0)
		}
	}
		
	return HAM_HANDLED;
}
public fw_PlayerKilled(victim, attacker, shouldgib)
{		
	if(victim == attacker || is_user_bot(attacker) || is_user_bot(victim) || !(1 <= attacker <= 33)) return HAM_IGNORED

	new wpn[10]; get_killer_weapon(attacker, pev(victim, pev_dmg_inflictor), wpn, charsmax(wpn))
	new hs = read_data(3)
	
	g_Exp[attacker] += (g_EventMode == MODO_HAPPYHOUR ? ((20 * g_Ganancia[attacker]) * 2) : (20 * g_Ganancia[attacker]) * 2)
	
	chatcolor(attacker, "%s!t GANANCIA!g PLAYER x%d!t~~~~>!y [!g +%d EXP !y]", Prefijo, g_Ganancia[attacker], (g_EventMode == MODO_HAPPYHOUR ? ((20 * g_Ganancia[attacker]) * 2) : (20 * g_Ganancia[attacker]) * 2))
	
	set_hudmessage(random_num(50,220), random_num(50,220), random_num(50,220), 0.10, 0.50, 1, 0.0, 3.5, 0.1, 0.1, 0)	
	
	if(equal(wpn, "knife") && !hs) {
		ShowSyncHudMsg(attacker, g_SyncHud[2], "_-= DESCUARTIZADO =-_^n^nVictima: %s^n", g_playername[victim])
		g_Monedas[attacker] += 5
	}
	else if(hs && !(equal(wpn, "knife"))) {
		ShowSyncHudMsg(attacker, g_SyncHud[2], "_-= CABEZA REVENTADA =-_^n^nVictima: %s^n", g_playername[victim])
		g_Monedas[attacker] += 3
	}
	else
	{
		ShowSyncHudMsg(attacker, g_SyncHud[2], "_-= ANIQUILADO =-_^n^nVictima: %s^n", g_playername[victim])
		g_Monedas[attacker] += 1
	}
	
	if(g_Mejora[attacker][2] && g_EventMode != MODO_ZOMBIE) {
		if(get_user_health(attacker) <= 75)
			set_user_health(attacker, get_user_health(attacker) + 25)
		else
			set_user_health(attacker, 100)		
	}
	
	if(g_EventMode == MODO_HAPPYHOUR)
		set_task(3.0, "Respawn", victim)
	
	check_level(attacker)
	return HAM_IGNORED;
}
public Respawn(id) {
	if(!is_user_connected(id)) return
	
	ExecuteHamB(Ham_CS_RoundRespawn, id)
}
public check_level( id )
{
	static bool:Up, LevelActual
	
	Up = false;
	LevelActual = g_Nivel[id]
	
	if (g_Exp[id] > need_nivel_sig(NIVEL_MAXIMO))
	{
		g_Exp[id] = need_nivel_sig(NIVEL_MAXIMO);
	}
	else
	{
		if (g_Exp[id] < 0)
			g_Exp[id] = 0;
	}
	
	while (g_Exp[id] >= need_nivel_sig(g_Nivel[id]) && g_Nivel[id] < NIVEL_MAXIMO)
	{
		Up = true;
		g_Nivel[id]++;
	}
	
	if (Up && LevelActual != g_Nivel[id])
	{
		Up = false;
		chatcolor(id, "!t[!gOG!t]!y NOW YOU ARE!t LEVEL:!g ++%d!y.", g_Nivel[id]);
		client_cmd( id, "spk surf_og/UpLevel.wav" );
	}
}
public registrar_cuenta( id, const szPassword[] ) {
	if(is_user_bot(id)) return PLUGIN_HANDLED;
	
	new szQuery[ 256 ], iData[ 2 ];
		
	iData[ 0 ] = id;
	iData[ 1 ] = REGISTRAR_CUENTA;
		
	formatex( szQuery, charsmax( szQuery ), "INSERT INTO %s (Nick,Password) VALUES (^"%s^",^"%s^")", szTable, g_playername[id], szPassword);
	SQL_ThreadQuery(g_hTuple, "DataHandler", szQuery, iData, 2);
	
	return PLUGIN_CONTINUE;
}
public loguear_cuenta( id, const szPassword[] ) {
	new szQuery[ 256 ], iData[ 2 ];
	
	iData[ 0 ] = id;
	iData[ 1 ] = LOGUEAR_CUENTA;
	
	formatex( szQuery, charsmax( szQuery ), "SELECT * FROM %s WHERE Nick='%s' AND Password='%s'", szTable, g_playername[ id ], szPassword);
	SQL_ThreadQuery( g_hTuple, "DataHandler", szQuery, iData, 2 );
}
public guardar_datos( id ) {
	new szQuery[ 2048 ], iData[ 2 ];
	
	iData[ 0 ] = id;
	iData[ 1 ] = GUARDAR_DATOS;

	new HudCfg[32], Skills[32], szIp[32]
	formatex(HudCfg, 31, "%d,%d,%d,%d,%d", g_hud_type[id],g_hud_color[id][0],g_hud_color[id][1],g_hud_color[id][2], g_HudHide[id] ? 1 : 0)
	formatex(Skills, 31, "%d,%d,%d,%d", g_Mejora[id][0],g_Mejora[id][1],g_Mejora[id][2],g_Mejora[id][3])
	get_user_ip(id, szIp, 31, 1)
	
	formatex( szQuery, charsmax( szQuery ), 
	"UPDATE %s SET XP='%d', Lvl='%d', Coins='%d', UON='%d', HudCfgs='%s', Skills='%s', LastIp='%s', AutoLogueo='%d' WHERE Nick='%s'", szTable, g_Exp[id], g_Nivel[id], g_Monedas[id], g_Estado[id], HudCfg, Skills, szIp, (g_autologueo[id] ? 1 : 0), g_playername[ id ] )
	SQL_ThreadQuery( g_hTuple, "DataHandler", szQuery, iData, 2 );
	
	return PLUGIN_CONTINUE
}
public DataHandler( failstate, Handle:Query, error[ ], error2, data[ ], datasize, Float:time ) {
	static id;
	id = data[ 0 ];
	
	if( !is_user_connected( id ) )
		return;
	
	switch( failstate ) {
		case TQUERY_CONNECT_FAILED: {
			log_to_file( "SQL_LOG_TQ.txt", "Error en la conexion al MySQL [%i]: %s", error2, error );
			return;
		}
		case TQUERY_QUERY_FAILED:
			log_to_file( "SQL_LOG_TQ.txt", "Error en la consulta al MySQL [%i]: %s", error2, error );
	}
	
	set_dhudmessage(0, 200, 0, -1.0, 0.70, 0, 0.0, 2.0, 0.1, 0.1)
	
	switch( data[ 1 ] ) {
		case REGISTRAR_CUENTA: {
			if( failstate < TQUERY_SUCCESS ) {
				if( containi( error, "Nick" ) != -1 ) 
					show_dhudmessage(id, "EL NOMBRE DEL PERSONAJE ESTA EN USO")
				else 
					show_dhudmessage(id, "ERROR AL CREAR LA CUENTA, INTENTE NUEVAMNETE.")
				
				client_cmd( id, "spk buttons/button10.wav" );
				
				server_cmd("kick #%d ^"Intenta entrar con Otro Nombre^"", get_user_userid(id))
			}
			else
			{	
				show_dhudmessage(id, "CUENTA CREADA CORRECTAMENTE!!")
				
				new szQuery[ 128 ], iData[ 2 ];
				
				iData[ 0 ] = id;
				iData[ 1 ] = CARGAR_DATOS;
				
				formatex( szQuery, charsmax( szQuery ), "SELECT * FROM %s WHERE Nick='%s';", szTable, g_playername[ id ] );
				SQL_ThreadQuery( g_hTuple, "DataHandler", szQuery, iData, 2 );
				
			}
			
		}
		case LOGUEAR_CUENTA: {
			if( SQL_NumResults( Query ) ) {
				g_Estado[id] = LOGUEADO
				copy(g_Estados[id], charsmax(g_Estados[]), g_playername[id])
				
				// Cargamos datos
				g_Exp[id] = SQL_ReadResult( Query, 3 );
				g_Monedas[id] = SQL_ReadResult( Query, 5 );
				
				static szHudInfo[32], g_Separar[5][32]
				SQL_ReadResult( Query, 7, szHudInfo, charsmax( szHudInfo ) );
				explode(szHudInfo, ",", g_Separar, charsmax(g_Separar), charsmax(g_Separar[]))
				
				g_hud_type[id] = str_to_num(g_Separar[0])
				g_hud_color[id][0] = str_to_num(g_Separar[1])
				g_hud_color[id][1] = str_to_num(g_Separar[2])
				g_hud_color[id][2] = str_to_num(g_Separar[3])
				g_HudHide[id] = (str_to_num(g_Separar[4]) ? true : false)
				
				static szSkills[32], g_Separar_Skills[4][32]
				SQL_ReadResult( Query, 8, szSkills, charsmax( szSkills ) );
				explode(szSkills, ",", g_Separar_Skills, charsmax(g_Separar_Skills), charsmax(g_Separar_Skills[]))
				
				g_Mejora[id][0] = (str_to_num(g_Separar_Skills[0]) == 1 ? true : false)
				g_Mejora[id][1] = (str_to_num(g_Separar_Skills[1]) == 1 ? true : false)
				g_Mejora[id][2] = (str_to_num(g_Separar_Skills[2]) == 1 ? true : false)
				g_Mejora[id][3] = (str_to_num(g_Separar_Skills[3]) == 1 ? true : false)
				
				console_print( id, "[OG] Datos Cargados." );
			
				func_login_success(id)
			}
			else {
				reset_vars(id)
				check_account(id)
			}
		}
		case VERIFY_ACCOUNT: {
			if( SQL_NumResults( Query ) ) {
				new g_id[33], szIp[32], szIpDb[32], szPwDb[32]
				
				g_id[id] = SQL_ReadResult(Query, 0)
				SQL_ReadResult( Query, 1, g_playername[ id ], charsmax( g_playername[ ] ) );					
				SQL_ReadResult( Query, 2, szPwDb, charsmax( szPwDb ) );					
				
				g_Estado[id] = SQL_ReadResult( Query, 3);
				SQL_ReadResult( Query, 4, szIpDb, charsmax( szIpDb ) );					
				g_autologueo[id] = (SQL_ReadResult(Query, 5) == 1 ? true : false)
				
				if(g_Estado[id] == LOGUEADO) {
					server_cmd("kick #%d ^"Usuario Actualmente Conectado^"", get_user_userid(id))
					return;
				}
				
				get_user_ip(id, szIp, 31, 1)
				if(equali(szIpDb, szIp) && g_autologueo[id])
				{
					chatcolor(id, "%s ANALIZANDO!g AUTOLOGUEO!t: !y[!g ACTIVADO !y]", Prefijo)
					
					new szInfoUser[32];
					
					copy(szInfoUser, charsmax(szInfoUser), g_playername[id])
					
					chatcolor(id, "%s SE CARGO EL!g AUTOLOGUEO!t USUARIO:!g %s", Prefijo, szInfoUser)
					
					g_Logueando[id] = true
					
					loguear_cuenta(id, szPwDb)
				}
				else {
					g_Logueando[id] = true
					set_task(5.0, "ShowMenu_Login", id+TASK_REGISTER_MENU, _,_,"b")
					
					chatcolor(id, "%s ANALIZANDO!g AUTOLOGUEO!t: !y[!g DESACTIVADO !y]", Prefijo)
				}
			}
			else {
				chatcolor(id, "%s ANALIZANDO!g USUARIO!t: !y[!g NUEVA CUENTA !y]", Prefijo)
				
				set_task(5.0, "ShowMenu_Login", id+TASK_REGISTER_MENU, _,_,"b")
			}
		}
		case CARGAR_DATOS: {
			if( SQL_NumResults( Query ) ) {
				g_Estado[id] = LOGUEADO
				
				g_Exp[ id ] = 0;
				g_Nivel[ id ] = 1;
				g_Monedas[ id ] = 0;
				g_HudHide[id] = false
				g_hud_type[id] = 0
				g_hud_color[id][0] = 0
				g_hud_color[id][1] = 150
				g_hud_color[id][2] = 250
				
				func_login_success(id)
			}
			else {
				show_dhudmessage(id, "ERROR AL CARGAR DATOS, INTENTE NUEVAMENTE.")
			}
		}
		case GUARDAR_DATOS: {
			if( failstate < TQUERY_SUCCESS ) console_print( id, "[OG] Error en el guardado de datos." );
			else console_print( id, "[OG] Datos guardados.");
		}
	}
}
public hook_chooseteam(id) {
	if(!is_user_connected(id)) return PLUGIN_HANDLED
	
	if(g_Estado[id] == REGISTRADO) {
		show_menu_login(id)
		return PLUGIN_HANDLED
	}
	
	return PLUGIN_CONTINUE
}
public ShowMenu_Login(taskid) {
	static id
	id = ID_REGISTER
	
	if(!is_user_connected(id) && task_exists(TASK_REGISTER_MENU)) {
		remove_task(id+TASK_REGISTER_MENU)
		return PLUGIN_HANDLED
	}
	
	show_menu_login(id)
	
	return PLUGIN_HANDLED
}
public func_login_success( id ) 
{	
	set_hudmessage(0, 100, 0, -1.0, 0.50, 2, 12.0, 3.0, 0.02, 0.04, 0)
	ShowSyncHudMsg(id, g_SyncHud[3], "== TE HAS LOGUEADO CORRECTAMENTE: %s ==", g_playername[id])

	remove_task(id+TASK_REGISTER_MENU)
	check_level(id)
	guardar_datos(id)

	engclient_cmd(id, "weapon_knife")

	ExecuteHamB(Ham_Spawn, id)
	
	return PLUGIN_HANDLED
}
show_menu_login(id, id_account = 0) {
	if(!is_user_connected(id) || g_Estado[id] == LOGUEADO) return 
	
	new menu, szMenu[1024]
	
	formatex(szMenu, charsmax(szMenu), "\r[\yOG\r]\w SISTEMA DE \yLOGUEO\d/\rREGISTRO\w: \d[\yACCOUNT: #%d\d]", id_account)
	
	menu = menu_create(szMenu, "show_menu_loginH");
	
	if(g_Logueando[id])
		formatex(szMenu, charsmax(szMenu), "\wIniciar sesión de Cuenta")
	else
		formatex(szMenu, charsmax(szMenu), "\rRegistrar nueva Cuenta")
	menu_additem(menu, szMenu, "1");
	
	menu_setprop( menu, MPROP_EXIT, MEXIT_NEVER );
	
	menu_display(id, menu);
}
public show_menu_loginH(id, Menu, Item)
{
	if (!is_user_connected(id)) {
		menu_destroy(Menu);
		return PLUGIN_HANDLED;
	}
	
	switch (Item) {
		case 0: {
			if(g_Logueando[id]) {
				ClientCmd(id, "messagemode LOG_PW")
			}
			else {
				ClientCmd(id, "messagemode CREATE_PW")
			}
		}
	}
	
	menu_destroy(Menu)
	return PLUGIN_HANDLED;
}
public reg_password( id ) {
	new szPassword[32]
	read_args( szPassword, charsmax( szPassword ) );
	remove_quotes( szPassword );
	trim( szPassword );
	
	if (strlen(szPassword) < 4) {
		g_Logueando[id] = false
		show_menu_login(id, 0)
		return PLUGIN_HANDLED
	}
	
	registrar_cuenta(id, szPassword)
	
	copy(g_password[id], charsmax(g_password[]), szPassword)
	
	return PLUGIN_CONTINUE;
}
public log_password( id ) {
	new szPassword[32]
	read_args( szPassword, charsmax( szPassword ) );
	remove_quotes( szPassword );
	trim( szPassword );
	
	if (strlen(szPassword) < 4) {
		g_Logueando[id] = true
		show_menu_login(id)
		
	
		server_print("%s", szPassword)
	
		return PLUGIN_HANDLED
	}
	
	loguear_cuenta(id, szPassword)
					
	copy(g_password[id], charsmax(g_password[]), szPassword)
	
	return PLUGIN_CONTINUE;
}
public MySQLx_Init( )
{
	g_hTuple = SQL_MakeDbTuple( MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MYSQL_DATEBASE );
	
	if( !g_hTuple ) 
	{
		log_to_file( "SQL_ERROR.txt", "No se pudo conectar con la base de datos." );
		return pause( "a" );
	}
	
	/*new szFormato[2048]
	
	formatex(szFormato, charsmax(szFormato), "CREATE TABLE IF NOT EXISTS usuarios (")
	formatex(szFormato, charsmax(szFormato), "%sid int(11), Nick varchar(32), XP int(11), Lvl int(11), Coins int(11), UON int(1), HudCfgs varchar(64), Skills varchar(64))", szFormato)
	
	SQL_ThreadQuery( g_hTuple, "query_handler_create", szFormato);*/
	
	set_task(5.0, "bugfixonlines")

	return PLUGIN_CONTINUE;
}
public query_handler_create(failstate, error[], errnum, data[], size, Float:queuetime)
{
	if(failstate != TQUERY_SUCCESS)
	{
		server_print("[OG] Tabla no Fueron Creada." );
		log_to_file("mysql_og.log", "ERROR FixOnline: [%d]- [%s]", errnum, error)
		return
	} 
	else server_print("[OG] Tabla Creada correctamente.");
}
public bugfixonlines() {
	new szQuery[256]
	
	formatex( szQuery, charsmax( szQuery ), "UPDATE %s SET UON='0' WHERE UON='1'", szTable)
	SQL_ThreadQuery( g_hTuple, "query_handlerbug", szQuery);
}
public query_handlerbug(failstate, error[], errnum, data[], size, Float:queuetime)
{
	if(failstate != TQUERY_SUCCESS)
	{
		server_print("[OG] Usuarios Conectados No Fueron Desconectados" );
		log_to_file("mysqlt.log", "ERROR FixOnline: [%d]- [%s]", errnum, error)
		return
	} 
	else server_print("[OG] Usuarios Conectados Han Sido Desconectados.");
}
public plugin_end( )
{
	for (new id = 1; id <= g_maxplayers; id++) 
	{
		if (is_user_connected(id) && g_Estado[id] == LOGUEADO) 
		{
			g_Estado[id] = REGISTRADO
			guardar_datos(id)
		}
	}
	SQL_FreeHandle( g_hTuple );
}
public show_menu_admin(id) {
	if( g_Estado[id] != LOGUEADO || !is_user_admin(id) ) {
		return PLUGIN_HANDLED;
	}
	
	new szMenu[1024];    
	formatex(szMenu, charsmax(szMenu), "\d[\rOG\d]\y SELECCION DE ARMAS:");	
	new Menu = menu_create(szMenu, "show_menu_adminH");
	
	for(new w = 0; w < sizeof(Admin_Weapons); w++) {
		formatex(szMenu, charsmax(szMenu), "\w%s", Admin_Weapons[w][WEAPON_NAME])
		menu_additem(Menu, szMenu);
	}
	
	menu_display(id, Menu);
	return PLUGIN_HANDLED;
}
public show_menu_adminH(id, Menu, Item)
{
	if (!is_user_connected(id)) {
		menu_destroy(Menu);
		return PLUGIN_HANDLED;
	}
	
	if(Item == MENU_EXIT)
	{
		menu_destroy(Menu);
		return PLUGIN_HANDLED;
	}
	
	if(!is_user_admin(id)) 
	{
		menu_destroy(Menu);
		return PLUGIN_HANDLED;
	}
	
	strip_user_weapons(id)
	give_item(id, "weapon_knife")
	give_item(id, "weapon_deagle")
	give_item(id, Admin_Weapons[Item][WEAPON_TYPE])
	cs_set_user_bpammo(id, Admin_Weapons[Item][CSW_WEAPON], 90)
	cs_set_user_bpammo(id, CSW_DEAGLE, 45)
	
	menu_destroy(Menu)
	return PLUGIN_HANDLED;
}
public show_menu_main(id)
{
	if( g_Estado[id] != LOGUEADO ) {
		return PLUGIN_HANDLED;
	}
	
	new szMenu[512];    
	formatex(szMenu, charsmax(szMenu), "\d[\rOG\d]\y %L:", id, "CONFIGS_TITTLE");	
	new Menu = menu_create(szMenu, "show_menu_mainH");

	formatex(szMenu, charsmax(szMenu), "\w%L \d[\r%L\d]^n", id, "CONFIG_HUD", id, !g_HudHide[id] ? "MOTD_ENABLED" : "MOTD_DISABLED")
	menu_additem(Menu, szMenu, "1");
	
	formatex(szMenu, charsmax(szMenu), "\yCompra de Mejoras")
	menu_additem(Menu, szMenu, "2");
	
	formatex(szMenu, charsmax(szMenu), "\wAutoLogueo \d[%s%L\d]", g_autologueo[id] ? "\y" : "\r", id, g_autologueo[id] ? "MOTD_ENABLED" : "MOTD_DISABLED")
	menu_additem(Menu, szMenu, "3");
	
	if(get_user_flags(id) & ADMIN_KICK) {
		formatex(szMenu, charsmax(szMenu), "\wPANEL DE ADMINISTRACION")
		menu_additem(Menu, szMenu, "4");
	}
	
	menu_display(id, Menu);
	return PLUGIN_HANDLED;
}

public show_menu_mainH(id, Menu, Item)
{
	if (!is_user_connected(id)) {
		menu_destroy(Menu);
		return PLUGIN_HANDLED;
	}
	
	if(Item == MENU_EXIT)
	{
		menu_destroy(Menu);
		return PLUGIN_HANDLED;
	}
	
	switch (Item) {
		case 0: {
			HudConfiguracion(id)
		}
		case 1: {
			Menu_Mejoras(id)
		}
		case 2: {
			g_autologueo[id] = (g_autologueo[id] ? false : true)
			show_menu_main(id)
		}
		case 3: {
			if(get_user_flags(id) & ADMIN_KICK) {
				show_menu_aoptions(id)
			}
		}
	}
	
	menu_destroy(Menu)
	return PLUGIN_HANDLED;
}
public show_menu_aoptions(id)
{
	if( g_Estado[id] != LOGUEADO ) {
		return PLUGIN_HANDLED;
	}
	
	new szMenu[512];    
	formatex(szMenu, charsmax(szMenu), "\d[\rOG\d]\y PANEL DE ADMINISTRACION:");	
	new Menu = menu_create(szMenu, "show_menu_aoptionsH");

	if(g_EventMode == MODO_ZOMBIE)
		formatex(szMenu, charsmax(szMenu), "\yDESHABILITAR MODO \d[\wZOMBIE\d]")
	else
		formatex(szMenu, charsmax(szMenu), "\rHABILITAR MODO \d[\wZOMBIE\d]")	
	menu_additem(Menu, szMenu, "1");
	
	if(g_EventMode == MODO_HAPPYHOUR)
		formatex(szMenu, charsmax(szMenu), "\yDESHABILITAR MODO \d[\wHAPPYHOUR\d]")
	else
		formatex(szMenu, charsmax(szMenu), "\rHABILITAR MODO \d[\wHAPPYHOUR\d]")
	
	menu_additem(Menu, szMenu, "2");
	
	menu_display(id, Menu);
	return PLUGIN_HANDLED;
}
public show_menu_aoptionsH(id, Menu, Item)
{
	if (!is_user_connected(id)) {
		menu_destroy(Menu);
		return PLUGIN_HANDLED;
	}
	
	if(Item == MENU_EXIT)
	{
		menu_destroy(Menu);
		show_menu_main(id)
		return PLUGIN_HANDLED;
	}
	
	switch (Item) {
		case 0: {
			if(g_EventMode == MODO_ZOMBIE) {
				surf_end_event_zombie(id)
				g_EventMode = NINGUN_MODO
			}
			else {
				if(g_EventMode != MODO_HAPPYHOUR && g_EventMode != MODO_ESCONDIDAS) {
					g_EventMode = MODO_ZOMBIE
					surf_init_event_zombie(0)
				}
			}
		}
		case 1: {
			if(g_EventMode == MODO_HAPPYHOUR) {
				g_EventoForzado = false
				g_EventMode = NINGUN_MODO
			}
			else {
				if(g_EventMode != MODO_ZOMBIE && g_EventMode != MODO_ESCONDIDAS) {
					g_EventoForzado = true
					g_EventMode = MODO_HAPPYHOUR
				}
			}
		}
	}
	
	menu_destroy(Menu)
	show_menu_aoptions(id)
	return PLUGIN_HANDLED;
}
public HudConfiguracion(id)
{
	if( g_Estado[id] != LOGUEADO ) {
		return PLUGIN_HANDLED;
	}
	
	new szMenu[512], pos[4];    
	formatex(szMenu, charsmax(szMenu), "\d[\rOG\d]\y Hud Configuracion^n\wEstado HUD: %s%L", !g_HudHide[id] ? "\y" : "\r", id, !g_HudHide[id] ? "MOTD_ENABLED" : "MOTD_DISABLED");	
	new Menu = menu_create(szMenu, "HudConfiguracionH")

	for(new i = 0; i < sizeof(LANG_HUD); i++) {
		if(i == sizeof(LANG_HUD)-1) {
			if(g_hud_type[id] == i)
				formatex(szMenu, charsmax(szMenu), "\d%L \w[\yX\w]^n", id, LANG_HUD[i][HUD_LANG])
			else
				formatex(szMenu, charsmax(szMenu), "\y%L^n", id, LANG_HUD[i][HUD_LANG])
		}
		else {
			if(g_hud_type[id] == i)
				formatex(szMenu, charsmax(szMenu), "\d%L \w[\yX\w]", id, LANG_HUD[i][HUD_LANG])
			else
				formatex(szMenu, charsmax(szMenu), "\y%L", id, LANG_HUD[i][HUD_LANG])
		}
		
		num_to_str(i, pos, 4 );
		menu_additem(Menu, szMenu, pos );
	}
	
	formatex(szMenu, charsmax(szMenu), "\wSeleccionar Cantidad Color\r Rojo \d[\y%d\d]", g_hud_color[id][0])
	menu_additem(Menu,szMenu, "4");
	
	formatex(szMenu, charsmax(szMenu), "\wSeleccionar Cantidad Color\r Verde \d[\y%d\d]", g_hud_color[id][1])
	menu_additem(Menu,szMenu, "5");
	
	formatex(szMenu, charsmax(szMenu), "\wSeleccionar Cantidad Color\r Azul \d[\y%d\d]", g_hud_color[id][2])
	menu_additem(Menu,szMenu, "6");
	
	if(g_HudHide[id])
		menu_additem(Menu, "\wACTIVAR HUD STATS \d[\yACTUALMENTE DESACTIVADO\d]", "7");
	else
		menu_additem(Menu, "\yDESACTIVAR HUD STATS \d[\rACTUALMENTE ACTIVADO\d]", "7");
	
	menu_display(id, Menu);
	return PLUGIN_HANDLED;
}

public HudConfiguracionH(id, Menu, Item)
{
	if (!is_user_connected(id)) {
		menu_destroy(Menu);
		return PLUGIN_HANDLED;
	}
	
	if(Item == MENU_EXIT)
	{
		menu_destroy(Menu);
		show_menu_main(id)
		return PLUGIN_HANDLED;
	}
	
	switch (Item) {
		case 0: 
		{
			if(g_hud_type[id] == HUD_NORMAL)
			{
				client_cmd( id, "spk buttons/button10.wav" );
				HudConfiguracion(id)
				client_print(id, print_center, "ACTUALMENTE ACTIVADO")
				return PLUGIN_HANDLED
			}
				
			g_hud_type[id] = HUD_NORMAL
		}
		case 1: 
		{
			if(g_hud_type[id] == HUD_BASICO)
			{
				client_cmd( id, "spk buttons/button10.wav" );
				HudConfiguracion(id)
				client_print(id, print_center, "ACTUALMENTE ACTIVADO")
				return PLUGIN_HANDLED
			}
			
			g_hud_type[id] = HUD_BASICO
		}
		case 2: 
		{
			if(g_hud_type[id] == HUD_ANTRAX)
			{
				client_cmd( id, "spk buttons/button10.wav" );
				HudConfiguracion(id)
				client_print(id, print_center, "ACTUALMENTE ACTIVADO")
				return PLUGIN_HANDLED
			}
			
			g_hud_type[id] = HUD_ANTRAX
		}
		case 3: client_cmd(id, "messagemode insert_red_amount")
		case 4: client_cmd(id, "messagemode insert_green_amount")
		case 5: client_cmd(id, "messagemode insert_blue_amount")
		case 6:
		{
			if(g_HudHide[id])
				g_HudHide[id] = false
			else
				g_HudHide[id] = true
		}	
	}
    
	HudConfiguracion(id)
	return PLUGIN_HANDLED;
}
public insert_color_amount1(id)
{
	if (!is_user_connected(id)) return PLUGIN_HANDLED;
	
	new message[128]
	read_argv(1, message, charsmax(message));
	
	if(strlen(message) < 1) return PLUGIN_HANDLED
	
	g_hud_color[id][0] = str_to_num(message)
	
	HudConfiguracion(id)
	
	return PLUGIN_CONTINUE;
} 
public insert_color_amount2(id)
{
	if (!is_user_connected(id)) return PLUGIN_HANDLED;
	
	new message[128]
	read_argv(1, message, charsmax(message));
	
	if(strlen(message) < 1) return PLUGIN_HANDLED
	
	g_hud_color[id][1] = str_to_num(message)
	
	HudConfiguracion(id)
	
	return PLUGIN_CONTINUE;
} 
public insert_color_amount3(id)
{
	if (!is_user_connected(id)) return PLUGIN_HANDLED;
	
	new message[128]
	read_argv(1, message, charsmax(message));
	
	if(strlen(message) < 1) return PLUGIN_HANDLED
	
	g_hud_color[id][2] = str_to_num(message)
	
	HudConfiguracion(id)
	
	return PLUGIN_CONTINUE;
} 
public Menu_Mejoras( iPlayer )
{
	if(!is_user_connected(iPlayer)) return PLUGIN_HANDLED
	
	static w, menu, item[128], pos[4], Formatex[128]
	
	formatex(Formatex, charsmax(Formatex), "\d[\rOG\d]\w COMPRA DE MEJORAS:")
	menu = menu_create(Formatex, "Menu_MejorasH")
	
	for(w = 0; w < sizeof(Mejoras); ++w)
	{
		if(Mejoras[w][MEJORA_ADMIN] != ADMIN_ALL) {
			if(get_user_flags(iPlayer) & Mejoras[w][MEJORA_ADMIN]) 
				formatex( item, charsmax( item ), "\w%s^n\y%s", Mejoras[w][MEJORA_NAME], Mejoras[w][MEJORA_INFO]);
			else
				formatex( item, charsmax( item ), "\d%s \w[\rVIP NEED\w]^n\y%s", Mejoras[w][MEJORA_NAME], Mejoras[w][MEJORA_INFO]);
		}
		else {
			if(g_Nivel[iPlayer] >= Mejoras[w][MEJORA_LEVEL] || g_Nivel[iPlayer] >= Mejoras[w][MEJORA_COSTO]) 
				formatex( item, charsmax( item ), "\w%s \d[\rCOST: %d\d]^n\y%s", Mejoras[w][MEJORA_NAME], Mejoras[w][MEJORA_COSTO], Mejoras[w][MEJORA_INFO]);
			else {
				if(g_Mejora[iPlayer][w])
					formatex( item, charsmax( item ), "\d%s \w[\rOBTENIDA\w]^n\y%s", Mejoras[w][MEJORA_NAME], Mejoras[w][MEJORA_INFO]);
				else if(g_Nivel[iPlayer] < Mejoras[w][MEJORA_LEVEL])
					formatex( item, charsmax( item ), "\d%s \w[\rLV:\y %d\w]^n\y%s", Mejoras[w][MEJORA_NAME], Mejoras[w][MEJORA_LEVEL], Mejoras[w][MEJORA_INFO]);
				else if(g_Nivel[iPlayer] < Mejoras[w][MEJORA_COSTO])
					formatex( item, charsmax( item ), "\d%s \w[\rCOST:\y %d\w]^n\y%s", Mejoras[w][MEJORA_NAME], Mejoras[w][MEJORA_COSTO], Mejoras[w][MEJORA_INFO]);
			}
		}
		
		num_to_str( w, pos, 4 );
		menu_additem( menu, item, pos );
	}
	
	if (pev_valid(iPlayer) == 2)
		set_pdata_int(iPlayer, 205, 0, 5)
			
	menu_display(iPlayer, menu)
	
	return PLUGIN_HANDLED
}
public Menu_MejorasH(iPlayer, menu, item) {
	
	if(item == MENU_EXIT) {
		menu_destroy(menu)
		show_menu_main(iPlayer)
		return PLUGIN_HANDLED
	}
	
	if(!is_user_connected(iPlayer)) { menu_destroy(menu); return PLUGIN_HANDLED; }
	
	if(g_Nivel[iPlayer] < Mejoras[item][MEJORA_LEVEL]) { 
		menu_destroy(menu); 
		Menu_Mejoras(iPlayer)
		client_cmd( iPlayer, "spk buttons/button10.wav" );
		return PLUGIN_HANDLED; 
	}
	if(g_Nivel[iPlayer] < Mejoras[item][MEJORA_COSTO]) { 
		menu_destroy(menu); 
		Menu_Mejoras(iPlayer)
		client_cmd( iPlayer, "spk buttons/button10.wav" );
		return PLUGIN_HANDLED; 
	}
	else if(Mejoras[item][MEJORA_ADMIN] != ADMIN_ALL && !(get_user_flags(iPlayer) & Mejoras[item][MEJORA_ADMIN])) { 
		menu_destroy(menu); 
		Menu_Mejoras(iPlayer)
		client_cmd( iPlayer, "spk buttons/button10.wav" );
		return PLUGIN_HANDLED; 
	}
	else if(g_Mejora[iPlayer][item]) {
		menu_destroy(menu); 
		Menu_Mejoras(iPlayer)
		client_cmd( iPlayer, "spk buttons/button10.wav" );
		return PLUGIN_HANDLED; 
	}
	
	chatcolor(iPlayer, "!t[!gOG!t]!y HAS!t COMPRADO LA MEJORA!y:!g %s!y.", Mejoras[item][MEJORA_NAME]);
	
	g_Mejora[iPlayer][item] = true
	
	g_Monedas[iPlayer] -= Mejoras[item][MEJORA_COSTO]
	
	menu_destroy(menu)
	
	return PLUGIN_CONTINUE
} 
public fw_Weapon_PrimaryAttack_Pre(entity)
{
	new id = pev(entity, pev_owner)
	
	if (g_Mejora[id][3])
	{
		pev(id, pev_punchangle, cl_pushangle[id])
		return HAM_IGNORED;
	}
	
	return HAM_IGNORED;
}
public fw_Weapon_PrimaryAttack_Post(entity)
{
	new id = pev(entity, pev_owner)
    
	if (g_Mejora[id][3])
	{
		new Float: push[3]
		pev(id, pev_punchangle, push)
		xs_vec_sub(push, cl_pushangle[id], push)
		xs_vec_mul_scalar(push, 0.3, push)
		xs_vec_add(push, cl_pushangle[id], push)
		set_pev(id, pev_punchangle, push)
        
		return HAM_IGNORED;
	}
	return HAM_IGNORED;
} 
public OnCBasePlayer_ResetMaxSpeed_P( id )
{
	if( is_user_alive(id) )
	{
		new Float:flMaxSpeed;
		pev(id, pev_maxspeed, flMaxSpeed);
		if( flMaxSpeed > 1.0 ) 
		{
			set_user_maxspeed(id, (g_Estado[id] == REGISTRADO ? 0.1 : 250.0))
		}
	}
}
public OnSetClientMaxspeed_P(id, Float:flMaxSpeed)
{
	if( flMaxSpeed != 1.0 && is_user_alive(id) && g_Estado[id] == REGISTRADO) 
	{
		set_user_maxspeed(id, 0.1)
	}
} 
public fwd_PlayerPostThink(id) {
	if(!is_user_connected(id) || !is_user_admin(id)) return PLUGIN_HANDLED
	
	cs_set_user_money(id, 999999)
	show_menu_admin(id)
	
	return PLUGIN_HANDLED
}
/*public fw_traceline(Float:v1[3],Float:v2[3],noMonsters,id,ptr)
{
	if(is_user_connected(id) && g_Mejora[id][3])
	{    
		new weapon = get_user_weapon(id);
            
		if(((1<<weapon) & SECONDARY_WEAPONS_BIT_SUM))
			return FMRES_IGNORED;
            
		if(((1<<weapon) & WEAPONS_BITSUM))
			return FMRES_IGNORED;
			
		static Float:aim[3];
		get_aim(id,v1,aim);
        
		new trace = create_tr2();
		engfunc(EngFunc_TraceLine,v1,aim,noMonsters,id,trace);
        
		set_tr2(ptr,TR_AllSolid,get_tr2(trace,TR_AllSolid));
		set_tr2(ptr,TR_StartSolid,get_tr2(trace,TR_StartSolid));
		set_tr2(ptr,TR_InOpen,get_tr2(trace,TR_InOpen));
		set_tr2(ptr,TR_InWater,get_tr2(trace,TR_InWater));
		set_tr2(ptr,TR_pHit,get_tr2(trace,TR_pHit));
		set_tr2(ptr,TR_iHitgroup,get_tr2(trace,TR_iHitgroup));
        
		get_tr2(trace,TR_flFraction,aim[0]);
		set_tr2(ptr,TR_flFraction,aim[0]);
		get_tr2(trace,TR_flPlaneDist,aim[0]);
		set_tr2(ptr,TR_flPlaneDist,aim[0]);
        
		get_tr2(trace,TR_vecEndPos,aim);
		set_tr2(ptr,TR_vecEndPos,aim);
		get_tr2(trace,TR_vecPlaneNormal,aim);
		set_tr2(ptr,TR_vecPlaneNormal,aim);
        
		free_tr2(trace);
	}
    
	return FMRES_IGNORED;
}^*/
public make_tracer(id)
{
	new clip,ammo
	new wpnid = get_user_weapon(id,clip,ammo)
	new pteam[16]
		
	get_user_team(id, pteam, 15)
		
	if ((bullets[id] > clip) && !((1<<wpnid) & WEAPONS_BITSUM) && g_Mejora[id][0]) 
	{
		new vec1[3], vec2[3]
		get_user_origin(id, vec1, 1) 
		get_user_origin(id, vec2, 4) 
			
		message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
		write_byte (0)    
		write_coord(vec1[0])
		write_coord(vec1[1])
		write_coord(vec1[2])
		write_coord(vec2[0])
		write_coord(vec2[1])
		write_coord(vec2[2])
		write_short( m_spriteTexture )
		write_byte(1)
		write_byte(5)
		write_byte(2) 
		write_byte(10)
		write_byte(0) 
		write_byte( random_num(25,225) )
		write_byte( random_num(25,225) )
		write_byte( random_num(25,225) )
		write_byte(200) // brightness
		write_byte(80) // speed
		message_end()
	}
	
	bullets[id] = clip
}
public BlockSay( index )
{
	static said[191];
	read_args(said, charsmax(said));
	remove_quotes(said);
	replace_all(said, charsmax(said), "%", " "); replace_all(said, charsmax(said), "#", " ");
        
	if (!ValidMessage(said, 1)) return PLUGIN_CONTINUE;
    
	static color[11], prefix[91]
	get_user_team(index, color, charsmax(color))
    
	formatex(prefix, charsmax(prefix), "%s^x04%s^x03 %s", 
	is_user_alive( index ) ? "^x01" : "^x01*MUERTO* ",  g_TagPlayer[ index ], g_playername[ index ])
    
	if (is_admin_prefix(index)) format(said, charsmax(said), "^x03%s", said)    
    
	format(said, charsmax(said), "%s^x01 :  %s", prefix, said)
    
	static i, team[11];
	for (i = 1; i <= g_maxplayers; i++)
	{
		if( is_user_connected( i ))
		{        
			get_user_team(i, team, charsmax(team))            
			changeTeamInfo(i, is_admin_prefix(index) ? "SPECTATOR" : color)            
			writeMessage(i, said)
			changeTeamInfo(i, team)
		}
	}
        
	return PLUGIN_HANDLED_MAIN;
}

public BlockTeamSay( index )
{
	static said[191];
	read_args(said, charsmax(said));
	remove_quotes(said);
	replace_all(said, charsmax(said), "%", " "); replace_all(said, charsmax(said), "#", " ");
        
	if (!ValidMessage(said, 1)) return PLUGIN_CONTINUE;
    
	static playerTeam, teamname[19];
	playerTeam = get_user_team(index);
    
	switch (playerTeam)
	{
		case 1: formatex( teamname, 18, " ^x01[^x03TT^x01] ");
		case 2: formatex( teamname, 18, " ^x01[^x03CT^x01] ");
		default: formatex( teamname, 18, " ^x01[^x03SPEC^x01] ");
	}
    
	static color[11], prefix[91]
	get_user_team(index, color, charsmax(color))
    
	formatex(prefix, charsmax(prefix), "%s%s^x04%s^x03 %s",
	is_user_alive( index ) ? "^x01" : "^x01*MUERTO* ",  teamname, g_TagPlayer[ index ], g_playername[ index ])
    
	if (is_admin_prefix(index)) format(said, charsmax(said), "^x03%s", said)    
	
	format(said, charsmax(said), "%s^x01 :  %s", prefix, said)
    
	static i, team[11];
	for (i = 1; i <= g_maxplayers; i++)
	{
		if (!is_user_connected(i)) continue;
        
		if (get_user_team(i) == playerTeam)
		{
			if( is_user_connected(i))
			{        
				get_user_team(i, team, charsmax(team))            
				changeTeamInfo(i, is_admin_prefix(index) ? "SPECTATOR" : color)            
				writeMessage(i, said)
				changeTeamInfo(i, team)
			}
		}
	}
    
	return PLUGIN_HANDLED_MAIN;
}

public changeTeamInfo(player, team[])
{
	message_begin(MSG_ONE, get_user_msgid( "TeamInfo" ), _, player)
	write_byte(player)
	write_string(team)
	message_end()
}

public writeMessage(player, message[])
{
	message_begin(MSG_ONE, saytext, {0, 0, 0}, player)
	write_byte(player)
	write_string(message)
	message_end()
}

public is_admin_prefix(id) {
	new admin = 0;
	new userflags = get_user_flags(id)
	
	if(userflags & ADMIN_KICK || userflags & ADMIN_LEVEL_A || userflags & ADMIN_LEVEL_B || userflags & ADMIN_LEVEL_C || 
	userflags & ADMIN_LEVEL_D || userflags & ADMIN_LEVEL_E || userflags & ADMIN_LEVEL_F) admin = 1;
    
	return admin;
} 

stock ValidMessage(text[], maxcount) 
{
	static len, i, count;
	len = strlen(text);
	count = 0;
    
	if (!len) return false;
    
	for (i = 0; i < len; i++) 
	{
		if (text[i] != ' ') 
		{
			count++
			if (count >= maxcount)
				return true;
		}
	}
    
	return false;
} 
stock chatcolor(id, const input[], any:...) 
{
	new count = 1, players[32]; 
	static msg[191]; 
	vformat(msg, 190, input, 3); 
     
	replace_all(msg, 190, "!g", "^4"); // Verde
	replace_all(msg, 190, "!y", "^1"); // Default
	replace_all(msg, 190, "!t", "^3"); // Color del Equipo 
     
	if (id) players[0] = id; else get_players(players, count, "ch"); { 
		for (new i = 0; i < count; i++)  { 
			if (is_user_connected(players[i])) { 
				message_begin(MSG_ONE_UNRELIABLE, get_user_msgid("SayText"), _, players[i]); 
				write_byte(players[i]); 
				write_string(msg); 
				message_end(); 
			} 
		} 
	} 
} 
stock explode(const string[], const delimiter[] = " ", output[][], array_len ,out_lent)
{
	new temp[128]
	copy(temp, charsmax(temp), string)
	for(new i = 0 ; i <= array_len ; i++) {
		split(temp, output[i], out_lent, temp, charsmax(temp), delimiter)
	}
} 
stock get_killer_weapon(killer, inflictor, retVar[], retLen)
{
	static killer_weapon_name[32];
	killer_weapon_name = "world";
    
	if (pev_valid(killer) && (pev(killer, pev_flags) & FL_CLIENT))
	{
		if (pev_valid(inflictor))
		{
			if (inflictor == killer)
			{
				new weapon = get_user_weapon(killer);
				get_weaponname(weapon, killer_weapon_name, 31);
			}
			else pev(inflictor, pev_classname, killer_weapon_name, 31);
		}
	}
	else
	{
		if (pev_valid(killer)) pev(inflictor, pev_classname, killer_weapon_name, 31);
		else if (killer == 0) killer_weapon_name = "worldspawn";
	}
    
	// Strip the monster_* or weapon_* from the inflictor's classname
	if (equal(killer_weapon_name, "weapon_", 7))
		format(killer_weapon_name, 31, "%s", killer_weapon_name[7]);
	else if (equal(killer_weapon_name, "monster_", 8))
		format(killer_weapon_name, 31, "%s", killer_weapon_name[8]);
	else if (equal(killer_weapon_name, "func_", 5))
		format(killer_weapon_name, 31, "%s", killer_weapon_name[5]);
    
	formatex(retVar, retLen, "%s", killer_weapon_name);
}
stock ClientCmd ( id, Command [ ], any:... ) 
{ 
	message_begin ( MSG_ONE_UNRELIABLE, SVC_DIRECTOR, _, id ) 
    	write_byte ( strlen ( Command ) + 2 ) 
    	write_byte ( 10 ) 
	write_string ( Command ) 
    	message_end ( ) 
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang3082\\ f0\\ fs16 \n\\ par }
*/
